.TH "hype.drawable.HDrawable" 3 "Mon May 20 2013" "HYPE_processing" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hype.drawable.HDrawable \- 
.PP
Abcd\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits HNode< HDrawable >, \fBhype\&.interfaces\&.HSwarmer\fP, and \fBhype\&.interfaces\&.HHittable\fP\&.
.PP
Inherited by \fBhype\&.drawable\&.HCanvas\fP, \fBhype\&.drawable\&.HEllipse\fP, \fBhype\&.drawable\&.HGroup\fP, \fBhype\&.drawable\&.HImage\fP, \fBhype\&.drawable\&.HPath\fP, \fBhype\&.drawable\&.HRect\fP, \fBhype\&.drawable\&.HShape\fP, \fBhype\&.drawable\&.HStage\fP, and \fBhype\&.drawable\&.HText\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBHDrawableIterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHDrawable\fP ()"
.br
.RI "\fIThe default constructor for \fBHDrawable\fP\&. \fP"
.ti -1c
.RI "void \fBcopyPropertiesFrom\fP (\fBHDrawable\fP other)"
.br
.RI "\fICopies the values of \fCother\fP's basic \fBHDrawable\fP fields\&. \fP"
.ti -1c
.RI "abstract \fBHDrawable\fP \fBcreateCopy\fP ()"
.br
.RI "\fICreates a copy of this drawable\&. \fP"
.ti -1c
.RI "boolean \fBpoppedOut\fP ()"
.br
.ti -1c
.RI "void \fBpopOut\fP ()"
.br
.ti -1c
.RI "void \fBputBefore\fP (\fBHDrawable\fP dest)"
.br
.ti -1c
.RI "void \fBputAfter\fP (\fBHDrawable\fP dest)"
.br
.ti -1c
.RI "void \fBswapLeft\fP ()"
.br
.ti -1c
.RI "void \fBswapRight\fP ()"
.br
.ti -1c
.RI "void \fBreplaceNode\fP (\fBHDrawable\fP dest)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBparent\fP ()"
.br
.RI "\fIReturns the parent of this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBfirstChild\fP ()"
.br
.RI "\fIReturns the first child of this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBlastChild\fP ()"
.br
.RI "\fIReturns the last child of this drawable\&. \fP"
.ti -1c
.RI "boolean \fBparentOf\fP (\fBHDrawable\fP d)"
.br
.RI "\fIChecks if the given drawable is the parent of this drawable\&. \fP"
.ti -1c
.RI "int \fBnumChildren\fP ()"
.br
.RI "\fIReturns the number of children of this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBadd\fP (\fBHDrawable\fP child)"
.br
.RI "\fIAdds the passed drawable as this drawable's child\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBremove\fP (\fBHDrawable\fP child)"
.br
.RI "\fIRemoves a child from this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawableIterator\fP \fBiterator\fP ()"
.br
.RI "\fICreates a new HIterator for this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBloc\fP (float newX, float newY)"
.br
.RI "\fISets the x and y position of this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBloc\fP (float newX, float newY, float newZ)"
.br
.RI "\fISets the x, y and z position of this drawable\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBloc\fP (PVector pt)"
.br
.RI "\fISets the position of this drawable via PVector\&. \fP"
.ti -1c
.RI "PVector \fBloc\fP ()"
.br
.RI "\fIReturns the position of this drawable as a PVector\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBx\fP (float newX)"
.br
.ti -1c
.RI "float \fBx\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBy\fP (float newY)"
.br
.ti -1c
.RI "float \fBy\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBz\fP (float newZ)"
.br
.ti -1c
.RI "float \fBz\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBmove\fP (float dx, float dy)"
.br
.RI "\fIMoves this drawable from its original x & y position\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBmove\fP (float dx, float dy, float dz)"
.br
.RI "\fIMoves this drawable from its original x, y & z position\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBlocAt\fP (int where)"
.br
.RI "\fIPositions this drawable at the defined location in relation to its parent, or (0,0) if the parent is null\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchor\fP (float pxX, float pxY)"
.br
.RI "\fISets the anchor of this drawable by pixels\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchor\fP (PVector pt)"
.br
.RI "\fISets the anchor of this drawable by pixels via a PVector\&. \fP"
.ti -1c
.RI "PVector \fBanchor\fP ()"
.br
.RI "\fIReturns the anchor of this drawable in pixels\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorX\fP (float pxX)"
.br
.RI "\fISets the x anchor of this drawable by pixels\&. \fP"
.ti -1c
.RI "float \fBanchorX\fP ()"
.br
.RI "\fIReturns the x anchor of this drawable in pixels\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorY\fP (float pxY)"
.br
.RI "\fISets the y anchor of this drawable by pixels\&. \fP"
.ti -1c
.RI "float \fBanchorY\fP ()"
.br
.RI "\fIReturns the y anchor of this drawable in pixels\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorPerc\fP (float percX, float percY)"
.br
.RI "\fISets the anchor of this drawable as percentage of its width and height\&. \fP"
.ti -1c
.RI "PVector \fBanchorPerc\fP ()"
.br
.RI "\fIReturns the x & y anchor of this drawable, as percentage of its width and height respectively\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorPercX\fP (float percX)"
.br
.RI "\fISets the x anchor of this drawable, as percentage of its width\&. \fP"
.ti -1c
.RI "float \fBanchorPercX\fP ()"
.br
.RI "\fIReturns the x anchor of this drawable, as percentage of its width\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorPercY\fP (float percY)"
.br
.RI "\fISets the y anchor of this drawable, as percentage of its height\&. \fP"
.ti -1c
.RI "float \fBanchorPercY\fP ()"
.br
.RI "\fIReturns the y anchnor of this drawable, as percentage of its height\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBanchorAt\fP (int where)"
.br
.RI "\fISets the anchor of this drawable at the defined location in relation to itself\&. \fP"
.ti -1c
.RI "\fBHDrawable\fP \fBsize\fP (float w, float h)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBsize\fP (float s)"
.br
.ti -1c
.RI "PVector \fBsize\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBwidth\fP (float w)"
.br
.ti -1c
.RI "float \fBwidth\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBheight\fP (float h)"
.br
.ti -1c
.RI "float \fBheight\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBscale\fP (float s)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBscale\fP (float sw, float sh)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBproportional\fP (boolean b)"
.br
.ti -1c
.RI "boolean \fBproportional\fP ()"
.br
.ti -1c
.RI "PVector \fBboundingSize\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBfill\fP (int clr)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBfill\fP (int clr, int alpha)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBfill\fP (int r, int g, int b)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBfill\fP (int r, int g, int b, int a)"
.br
.ti -1c
.RI "int \fBfill\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBnoFill\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstroke\fP (int clr)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstroke\fP (int clr, int alpha)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstroke\fP (int r, int g, int b)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstroke\fP (int r, int g, int b, int a)"
.br
.ti -1c
.RI "int \fBstroke\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBnoStroke\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstrokeCap\fP (int type)"
.br
.ti -1c
.RI "int \fBstrokeCap\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstrokeJoin\fP (int type)"
.br
.ti -1c
.RI "int \fBstrokeJoin\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBstrokeWeight\fP (float f)"
.br
.ti -1c
.RI "float \fBstrokeWeight\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBrotation\fP (float deg)"
.br
.ti -1c
.RI "float \fBrotation\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBrotationRad\fP (float rad)"
.br
.ti -1c
.RI "float \fBrotationRad\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBrotate\fP (float deg)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBrotateRad\fP (float rad)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBalpha\fP (int a)"
.br
.ti -1c
.RI "int \fBalpha\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBalphaPerc\fP (float aPerc)"
.br
.ti -1c
.RI "float \fBalphaPerc\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBvisibility\fP (boolean v)"
.br
.ti -1c
.RI "boolean \fBvisibility\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBshow\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBhide\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBalphaShift\fP (int da)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBalphaShiftPerc\fP (float daPerc)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBextras\fP (\fBHBundle\fP b)"
.br
.ti -1c
.RI "\fBHBundle\fP \fBextras\fP ()"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBobj\fP (String key, Object value)"
.br
.ti -1c
.RI "\fBHDrawable\fP \fBnum\fP (String key, float value)"
.br
.ti -1c
.RI "Object \fBobj\fP (String key)"
.br
.ti -1c
.RI "String \fBstr\fP (String key)"
.br
.ti -1c
.RI "float \fBnum\fP (String key)"
.br
.ti -1c
.RI "int \fBnumI\fP (String key)"
.br
.ti -1c
.RI "boolean \fBbool\fP (String key)"
.br
.ti -1c
.RI "boolean \fBcontains\fP (float absX, float absY)"
.br
.ti -1c
.RI "boolean \fBcontainsRel\fP (float relX, float relY)"
.br
.ti -1c
.RI "void \fBpaintAll\fP (PGraphics g, boolean usesZ, float currAlphaPerc)"
.br
.ti -1c
.RI "abstract void \fBdraw\fP (PGraphics g, boolean usesZ, float drawX, float drawY, float currAlphaPerc)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBapplyStyle\fP (PGraphics g, float currAlphaPerc)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBHDrawable\fP \fB_parent\fP"
.br
.ti -1c
.RI "\fBHBundle\fP \fB_extras\fP"
.br
.ti -1c
.RI "float \fB_x\fP"
.br
.ti -1c
.RI "int \fB_numChildren\fP"
.br
.ti -1c
.RI "boolean \fB_proportional\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Abcd\&. 

Efgh\&.
.PP
Ijk lmno\&.
.PP
\fBAuthor:\fP
.RS 4
james 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "hype\&.drawable\&.HDrawable\&.HDrawable ()"

.PP
The default constructor for \fBHDrawable\fP\&. It sets several fields into their proper default values:
.IP "\(bu" 2
alpha percentage = 1 (100%)
.IP "\(bu" 2
fill = white
.IP "\(bu" 2
stroke = black
.IP "\(bu" 2
stroke cap = round
.IP "\(bu" 2
stroke join = miter
.IP "\(bu" 2
stroke weight = 1
.IP "\(bu" 2
width = 100
.IP "\(bu" 2
height = 100 
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.add (\fBHDrawable\fPchild)"

.PP
Adds the passed drawable as this drawable's child\&. If \fCchild\fP is already a child of another drawable, it removes itself from its current parent and gets added to this drawable\&.
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP The child to be added to this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The drawable passed through this method\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchor (floatpxX, floatpxY)"

.PP
Sets the anchor of this drawable by pixels\&. Note that \fBHDrawable\fP stores its anchor coordinates as a percentage of its width and height\&. So if the current size of this drawable is \fC(100,100)\fP, setting the anchor to \fC(75,75)\fP will be stored as \fC(0\&.75,0\&.75)\fP\&.
.PP
In case that the current width or height is 0, then the width or height is assumed to be 100 when computing the anchor in this method\&.
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchor(PVector)\fP, \fBanchorX(float)\fP, \fBanchorY(float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpxX\fP The desired x anchor for this drawable, in pixels\&. 
.br
\fIpxY\fP The desired y anchor for this drawable, in pixels\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchor (PVectorpt)"

.PP
Sets the anchor of this drawable by pixels via a PVector\&. This method calls \fBanchor(float,float)\fP with \fCpt\fP's x and y fields as the arguments\&.
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchor(float,float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The PVector containing the desired x and y anchor for this drawable, in pixels 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "PVector hype\&.drawable\&.HDrawable\&.anchor ()"

.PP
Returns the anchor of this drawable in pixels\&. The result of this method is the product of its width & height and its x & y anchor percentages respectively\&. So if this drawable is anchored at the center, this method will return \fC(50,50)\fP when the size is \fC(100,100)\fP, \fC(30,30)\fP when the size is \fC(60,60)\fP and \fC(0,0)\fP when size is \fC(0,0)\fP\&.
.PP
\fBSee Also:\fP
.RS 4
\fBanchorX()\fP, \fBanchorY()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A new PVector containing the anchor of this drawable, in pixels\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorAt (intwhere)"

.PP
Sets the anchor of this drawable at the defined location in relation to itself\&. The \fCwhere\fP parameter can be any of the following HConstants values:
.IP "\(bu" 2
\fCHConstants\&.NONE\fP (does nothing)
.IP "\(bu" 2
\fCHConstants\&.LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_X\fP
.IP "\(bu" 2
\fCHConstants\&.TOP\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_Y\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER\fP
.IP "\(bu" 2
\fCHConstants\&.TOP_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.TOP_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_TOP\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_BOTTOM\fP
.PP
.PP
These values can be combined via bitwise OR, so \fCH\&.TOP | H\&.LEFT\fP would be equal to \fCH\&.TOP_LEFT\fP\&.
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBlocAt(int)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIwhere\fP The value that represents the anchor for this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorPerc (floatpercX, floatpercY)"

.PP
Sets the anchor of this drawable as percentage of its width and height\&. 0 is equivalent to 0% and 1 is equivalent to 100%
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchorPercX(float)\fP, \fBanchorPercY(float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpercX\fP The desired x anchor for this drawable, as percentage\&. 
.br
\fIpercY\fP The desired y anchor for this drawable, as percentage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "PVector hype\&.drawable\&.HDrawable\&.anchorPerc ()"

.PP
Returns the x & y anchor of this drawable, as percentage of its width and height respectively\&. \fBSee Also:\fP
.RS 4
\fBanchorPercX()\fP, \fBanchorPercY()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A new PVector containing this drawable's anchor as percentage 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorPercX (floatpercX)"

.PP
Sets the x anchor of this drawable, as percentage of its width\&. This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchorPerc(float,float)\fP, \fBanchorPercY(float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpercX\fP The desired x anchor for this drawable, as percentage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "float hype\&.drawable\&.HDrawable\&.anchorPercX ()"

.PP
Returns the x anchor of this drawable, as percentage of its width\&. \fBSee Also:\fP
.RS 4
\fBanchorPerc()\fP, \fBanchorPercY()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The x anchor of this drawable, as percentage\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorPercY (floatpercY)"

.PP
Sets the y anchor of this drawable, as percentage of its height\&. This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchorPerc()\fP, \fBanchorPercX()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpercY\fP The desired y anchor for this drawable, as percentage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "float hype\&.drawable\&.HDrawable\&.anchorPercY ()"

.PP
Returns the y anchnor of this drawable, as percentage of its height\&. \fBSee Also:\fP
.RS 4
\fBanchorPerc()\fP, \fBanchorPercX()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The y anchor of this drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorX (floatpxX)"

.PP
Sets the x anchor of this drawable by pixels\&. Note that \fBHDrawable\fP stores its x anchor coordinates as a percentage of its width\&. If the width of this drawable is 0, it is assumed as 100 when computing the x anchor in this method\&.
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchor(float,float)\fP, \fBanchor(PVector)\fP, \fBanchorY(float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpxX\fP The desired x anchor for this drawable, in pixels\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "float hype\&.drawable\&.HDrawable\&.anchorX ()"

.PP
Returns the x anchor of this drawable in pixels\&. The result of this method is the product of its width and x anchor percentage\&.
.PP
\fBSee Also:\fP
.RS 4
\fBanchor()\fP, \fBanchorY()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The x anchor of this drawable, in pixels\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.anchorY (floatpxY)"

.PP
Sets the y anchor of this drawable by pixels\&. Note that \fBHDrawable\fP stores its y anchor coordinates as a percentage of its height\&. If the height of this drawable is 0, it is assumed as 100 when computing the y anchor in this method
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchor(float,float)\fP, \fBanchor(PVector)\fP, \fBanchorX(float)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpxY\fP The desired y anchor for this drawable, in pixels\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "float hype\&.drawable\&.HDrawable\&.anchorY ()"

.PP
Returns the y anchor of this drawable in pixels\&. The result of this method is the product of its height and y anchor percentage\&.
.PP
\fBSee Also:\fP
.RS 4
\fBanchor()\fP, \fBanchorX()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The y anchor of this drawable, in pixels\&. 
.RE
.PP

.SS "void hype\&.drawable\&.HDrawable\&.copyPropertiesFrom (\fBHDrawable\fPother)"

.PP
Copies the values of \fCother\fP's basic \fBHDrawable\fP fields\&. This method is primarily used for implementing \fBcreateCopy()\fP\&. It copies the following fields from \fCother\fP:
.IP "\(bu" 2
x & y coordinates
.IP "\(bu" 2
x & y anchors
.IP "\(bu" 2
width & height
.IP "\(bu" 2
rotation
.IP "\(bu" 2
alpha
.IP "\(bu" 2
stroke & fill properties
.PP
.PP
\fBSee Also:\fP
.RS 4
\fBcreateCopy()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The drawable to copy its properties from\&. 
.RE
.PP

.SS "abstract \fBHDrawable\fP hype\&.drawable\&.HDrawable\&.createCopy ()\fC [pure virtual]\fP"

.PP
Creates a copy of this drawable\&. This method is abstract and is meant to be implemented by the children of this class\&.
.PP
\fBReturns:\fP
.RS 4
A copy of this drawable\&. 
.RE
.PP

.PP
Implemented in \fBhype\&.drawable\&.HStage\fP, \fBhype\&.drawable\&.HText\fP, \fBhype\&.drawable\&.HCanvas\fP, \fBhype\&.drawable\&.HEllipse\fP, \fBhype\&.drawable\&.HPath\fP, \fBhype\&.drawable\&.HRect\fP, \fBhype\&.drawable\&.HShape\fP, \fBhype\&.drawable\&.HImage\fP, and \fBhype\&.drawable\&.HGroup\fP\&.
.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.firstChild ()"

.PP
Returns the first child of this drawable\&. If this drawable has only one child, then the first child is also considered as the last child\&.
.PP
\fBReturns:\fP
.RS 4
The first child of this drawable, or null if there's none\&. 
.RE
.PP

.SS "\fBHDrawableIterator\fP hype\&.drawable\&.HDrawable\&.iterator ()"

.PP
Creates a new HIterator for this drawable\&. Note that while HIterator has similar functions for java\&.util\&.Iterator, the former does \fInot\fP extend the latter\&. This is due to js mode compatibility issues\&.
.PP
\fBSee Also:\fP
.RS 4
\fBHDrawableIterator\fP, HIterator 
.RE
.PP
\fBReturns:\fP
.RS 4
A new HIterator for this drawable 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.lastChild ()"

.PP
Returns the last child of this drawable\&. If this drawable has only one child, then the last child is also considered as the first child\&.
.PP
\fBReturns:\fP
.RS 4
The last child of this drawable, or null if there's none\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.loc (floatnewX, floatnewY)"

.PP
Sets the x and y position of this drawable\&. This method returns itself so this could be chained\&. 
.PP
\fBParameters:\fP
.RS 4
\fInewX\fP The new x coordinate for this drawable\&. 
.br
\fInewY\fP The new y coordinate for this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.loc (floatnewX, floatnewY, floatnewZ)"

.PP
Sets the x, y and z position of this drawable\&. This method returns itself so this could be chained\&. 
.PP
\fBParameters:\fP
.RS 4
\fInewX\fP The new x coordinate for this drawable\&. 
.br
\fInewY\fP The new y coordinate for this drawable\&. 
.br
\fInewZ\fP The new z coordinate for this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.loc (PVectorpt)"

.PP
Sets the position of this drawable via PVector\&. This method returns itself so this could be chained\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP A PVector containing the new coordinates for this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "PVector hype\&.drawable\&.HDrawable\&.loc ()"

.PP
Returns the position of this drawable as a PVector\&. \fBReturns:\fP
.RS 4
A new PVector containing the coordinates of this drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.locAt (intwhere)"

.PP
Positions this drawable at the defined location in relation to its parent, or (0,0) if the parent is null\&. The \fCwhere\fP parameter can be any of the following HConstants values:
.IP "\(bu" 2
\fCHConstants\&.NONE\fP (does nothing)
.IP "\(bu" 2
\fCHConstants\&.LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_X\fP
.IP "\(bu" 2
\fCHConstants\&.TOP\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_Y\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER\fP
.IP "\(bu" 2
\fCHConstants\&.TOP_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.TOP_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.BOTTOM_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_LEFT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_RIGHT\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_TOP\fP
.IP "\(bu" 2
\fCHConstants\&.CENTER_BOTTOM\fP
.PP
.PP
These values can be combined via bitwise OR, so \fCH\&.TOP | H\&.LEFT\fP would be equal to \fCH\&.TOP_LEFT\fP\&.
.PP
This method returns itself so this could be chained\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBanchorAt(int)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIwhere\fP The value that represents the location for this drawable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.move (floatdx, floatdy)"

.PP
Moves this drawable from its original x & y position\&. This method returns itself so this could be chained\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP The amount this drawable will be moved on the x-axis\&. 
.br
\fIdy\fP The amount this drawable will be moved on the y-axis\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.move (floatdx, floatdy, floatdz)"

.PP
Moves this drawable from its original x, y & z position\&. This method returns itself so this could be chained\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP The amount this drawable will be moved on the x-axis\&. 
.br
\fIdy\fP The amount this drawable will be moved on the y-axis\&. 
.br
\fIdz\fP The amount this drawable will be moved on the z-axis\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This drawable\&. 
.RE
.PP

.SS "int hype\&.drawable\&.HDrawable\&.numChildren ()"

.PP
Returns the number of children of this drawable\&. \fBReturns:\fP
.RS 4
The number of children of this drawable\&. 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.parent ()"

.PP
Returns the parent of this drawable\&. \fBReturns:\fP
.RS 4
The parent of this drawable, or null if there's none\&. 
.RE
.PP

.SS "boolean hype\&.drawable\&.HDrawable\&.parentOf (\fBHDrawable\fPd)"

.PP
Checks if the given drawable is the parent of this drawable\&. \fBParameters:\fP
.RS 4
\fId\fP The drawable to be checked 
.RE
.PP
\fBReturns:\fP
.RS 4
True if this drawable is the parent of \fCd\fP 
.RE
.PP

.SS "\fBHDrawable\fP hype\&.drawable\&.HDrawable\&.remove (\fBHDrawable\fPchild)"

.PP
Removes a child from this drawable\&. If \fCchild\fP isn't a child of this drawable, this method will do nothing\&. Regardless, it will still return \fCchild\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP The child to be removed from this drawable 
.RE
.PP
\fBReturns:\fP
.RS 4
The drawable passed through this method\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for HYPE_processing from the source code\&.
